apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "anycableGo.fullname" . }}
  labels:
    app: {{ template "anycableGo.name" . }}
    component: anycable-go
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ default 2 .Values.replicas }}
  revisionHistoryLimit: {{ default 10 .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: {{ template "anycableGo.name" . }}
      component: anycable-go
      release: {{ .Release.Name | quote }}
  strategy:
    rollingUpdate:
      maxSurge: {{ default 1 .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ default 1 .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "anycableGo.name" . }}
        component: anycable-go
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/env-secret.yml") . | sha256sum }}
      name: {{ .Release.Name | quote }}
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: {{ template "anycableGo.name" . }}
                  release: {{ .Release.Name | quote }}
            weight: 100
      {{- if .Values.image.pullSecrets.enabled }}
      imagePullSecrets:
        - name: "{{ .Release.Name }}-docker-registry-secret"
      {{- end }}
      containers:
      - name: anycable-go
        ports:
        - name: http
          containerPort: {{ required "A valid listening port for anycable is required! Please specify `env.anycablePort` in values!" .Values.env.anycablePort }}
          protocol: TCP
        {{- if .Values.env.anycableMetricsPort }}
        - name: metrics
          containerPort: {{ .Values.env.anycableMetricsPort }}
          protocol: TCP
        {{- end }}
        env:
        - name: ANYCABLE_HOST
          value: {{ template "anycableGo.anycableHost" . }}
        - name: ANYCABLE_PORT
          value: {{ template "anycableGo.anycablePort" . }}
        - name: ANYCABLE_PATH
          value: {{ template "anycableGo.anycablePath" . }}
        {{- if .Values.tls }}
        - name: ANYCABLE_SSL_CERT
          value: /etc/ssl/anycable-go/tls.crt
        - name: ANYCABLE_SSL_KEY
          value: /etc/ssl/anycable-go/tls.key
        {{- end }}
        - name: ANYCABLE_REDIS_CHANNEL
          value: {{ template "anycableGo.anycableRedisChannel" . }}
        - name: ANYCABLE_REDIS_SENTINEL_DISCOVERY_INTERVAL
          value: {{ template "anycableGo.anycableRedisSentinelDiscoveryInterval" . }}
        - name: ANYCABLE_REDIS_KEEPALIVE_INTERVAL
          value: {{ template "anycableGo.anycableRedisKeepaliveInterval" . }}
        - name: ANYCABLE_RPC_HOST
          value: {{ template "anycableGo.anycableRpcHost" . }}
        - name: ANYCABLE_HEADERS
          value: {{ template "anycableGo.anycableHeaders" . }}
        - name: ANYCABLE_DISCONNECT_RATE
          value: {{ template "anycableGo.anycableDisconnectRate" . }}
        - name: ANYCABLE_LOG_LEVEL
          value: {{ template "anycableGo.anycableLogLevel" . }}
        - name: ANYCABLE_LOG_FORMAT
          value: {{ template "anycableGo.anycableLogFormat" . }}
        - name: ANYCABLE_DEBUG
          value: {{ template "anycableGo.anycableDebug" . }}
        - name: ANYCABLE_METRICS_LOG
          value: {{ template "anycableGo.anycableMetricsLog" . }}
        - name: ANYCABLE_METRICS_LOG_INTERVAL
          value: {{ template "anycableGo.anycableMetricsLogInterval" . }}
        - name: ANYCABLE_METRICS_LOG_FORMATTER
          value: {{ template "anycableGo.anycableMetricsLogFormatter" . }}
        - name: ANYCABLE_METRICS_HTTP
          value: {{ template "anycableGo.anycableMetricsHttp" . }}
        - name: ANYCABLE_METRICS_HOST
          value: {{ template "anycableGo.anycableMetricsHost" . }}
        - name: ANYCABLE_METRICS_PORT
          value: {{ template "anycableGo.anycableMetricsPort" . }}
        - name: ANYCABLE_HEALTH_PATH
          value: {{ template "anycableGo.anycableHealthPath" . }}
        - name: ANYCABLE_MAX_MESSAGE_SIZE
          value: {{ template "anycableGo.anycableMaxMessageSize" . }}
        - name: ANYCABLE_REDIS_URL
          valueFrom: {{ include "anycableGo.anycableRedisUrl" . | nindent 12 }}
        - name: ANYCABLE_REDIS_SENTINELS
          valueFrom: {{ include "anycableGo.anycableRedisSentinels" . | nindent 12 }}
        envFrom: {{ include "anycableGo.envFrom" . | nindent 10 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        {{- if hasKey .Values "livenessProbe" }}
        livenessProbe: {{ toYaml .Values.livenessProbe | nindent 10 }}
        {{- else }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: {{ if .Values.tls }}HTTPS{{ else }}HTTP{{ end }}
          initialDelaySeconds: 90
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        {{- end }}
        {{- if hasKey .Values "readinessProbe" }}
        readinessProbe: {{ toYaml .Values.readinessProbe | nindent 10 }}
        {{- else }}
        readinessProbe:
          httpGet:
            path: /health
            port: http
            scheme: {{ if .Values.tls }}HTTPS{{ else }}HTTP{{ end }}
          initialDelaySeconds: 15
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        {{- end }}
        {{- if .Values.resources }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
         {{- end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        {{- if .Values.tls }}
        volumeMounts:
        - name: ssl
          mountPath: "/etc/ssl/anycable-go"
          readOnly: true
        {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      {{- if .Values.tls }}
      volumes:
      - name: ssl
        secret:
          secretName: {{ .Values.tls.secretName | quote }}
      {{- end }}
